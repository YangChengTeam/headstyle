package com.feiyou.headstyle.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.feiyou.headstyle.bean.HeadInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEAD_INFO".
*/
public class HeadInfoDao extends AbstractDao<HeadInfo, Long> {

    public static final String TABLENAME = "HEAD_INFO";

    /**
     * Properties of entity HeadInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Cid = new Property(1, String.class, "cid", false, "CID");
        public final static Property Hurl = new Property(2, String.class, "hurl", false, "HURL");
        public final static Property Clicknum = new Property(3, String.class, "clicknum", false, "CLICKNUM");
        public final static Property Keepnum = new Property(4, String.class, "keepnum", false, "KEEPNUM");
        public final static Property Gaoqing = new Property(5, String.class, "gaoqing", false, "GAOQING");
    }


    public HeadInfoDao(DaoConfig config) {
        super(config);
    }
    
    public HeadInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEAD_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CID\" TEXT," + // 1: cid
                "\"HURL\" TEXT," + // 2: hurl
                "\"CLICKNUM\" TEXT," + // 3: clicknum
                "\"KEEPNUM\" TEXT," + // 4: keepnum
                "\"GAOQING\" TEXT);"); // 5: gaoqing
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEAD_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HeadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
 
        String hurl = entity.getHurl();
        if (hurl != null) {
            stmt.bindString(3, hurl);
        }
 
        String clicknum = entity.getClicknum();
        if (clicknum != null) {
            stmt.bindString(4, clicknum);
        }
 
        String keepnum = entity.getKeepnum();
        if (keepnum != null) {
            stmt.bindString(5, keepnum);
        }
 
        String gaoqing = entity.getGaoqing();
        if (gaoqing != null) {
            stmt.bindString(6, gaoqing);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HeadInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String cid = entity.getCid();
        if (cid != null) {
            stmt.bindString(2, cid);
        }
 
        String hurl = entity.getHurl();
        if (hurl != null) {
            stmt.bindString(3, hurl);
        }
 
        String clicknum = entity.getClicknum();
        if (clicknum != null) {
            stmt.bindString(4, clicknum);
        }
 
        String keepnum = entity.getKeepnum();
        if (keepnum != null) {
            stmt.bindString(5, keepnum);
        }
 
        String gaoqing = entity.getGaoqing();
        if (gaoqing != null) {
            stmt.bindString(6, gaoqing);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HeadInfo readEntity(Cursor cursor, int offset) {
        HeadInfo entity = new HeadInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hurl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // clicknum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // keepnum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // gaoqing
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HeadInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHurl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClicknum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKeepnum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGaoqing(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HeadInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HeadInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HeadInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
